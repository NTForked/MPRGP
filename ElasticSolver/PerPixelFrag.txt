#define MAX_LIGHTS 8 
#define FALL_OFF 1.2

uniform sampler2D STex[MAX_LIGHTS];
uniform float zOff;

varying vec3 vN;
varying vec3 v; 
varying vec4 sT[MAX_LIGHTS];

float shadowMap(int index)
{
	vec4 sTDW=sT[index]/sT[index].w;
	float distL=texture2D(STex[index],sTDW.st).z;
 	if(sT[index].w > 0.0)
 		return (distL < sTDW.z-zOff/sT[index].w) ? 0.0 : 1.0;
	return 1.0;
}
float shadowMapVSM(int index)
{
	vec4 sTDW=sT[index]/sT[index].w;
	vec2 moments=texture2D(STex[index],sTDW.st).xy;
	if(sT[index].w > 0.0)
	{
		float distance=sTDW.z-0.001/sT[index].w;
		if(moments.x >= distance)
			return 1.0;
		float variance=moments.y-(moments.x*moments.x);
		variance=max(variance,0.00002);
		float d=distance-moments.x;
		float pMax=variance/(variance+d*d);
		return pMax;
	}
	return 1.0;
}

void main(void) 
{ 
	vec3 N=normalize(vN);
	vec3 E=normalize(-v);
	vec3 L;
	float dist;
	float att;

	vec3 finalColor=vec3(gl_FrontMaterial.ambient);
	for(int index=0;index<MAX_LIGHTS;index++)
	{
		vec3 lightPos=(gl_ModelViewMatrix*gl_LightSource[index].position).xyz;
		vec3 spotDir=gl_NormalMatrix*gl_LightSource[index].spotDirection;
		float clampFrom=cos(radians(gl_LightSource[index].spotCutoff*FALL_OFF));
		float clampTo=cos(radians(gl_LightSource[index].spotCutoff));
		if(0.0 == gl_LightSource[index].position.w)
		{
			//att=1.0;
			//L=normalize(lightPos);
			continue;
		}
		else
		{
			L=lightPos-v;
			dist=length(L);
			L=normalize(L);
			att=1.0/(gl_LightSource[index].constantAttenuation
			        +gl_LightSource[index].linearAttenuation*dist
			        +gl_LightSource[index].quadraticAttenuation*dist*dist);
			if(gl_LightSource[index].spotCutoff <= 90.0)
			{
				float clampedCos=max(0.0,dot(-L,normalize(spotDir)));
				att*=pow(clampedCos,gl_LightSource[index].spotExponent);
				if(clampedCos < clampTo) 
					att*=clamp((clampedCos-clampFrom)/(clampTo-clampFrom),0.0,1.0);
			}
			if(zOff == 0.0)
				att*=shadowMapVSM(index);
			else att*=shadowMap(index);
		}

		vec3 diff=att*
			vec3(gl_LightSource[index].diffuse)* 
			vec3(gl_FrontMaterial.diffuse)*
			max(0.0,dot(N,L));

		vec3 spec;
		if(dot(N,L) < 0.0)spec=vec3(0.0,0.0,0.0);
		else spec=att*
			vec3(gl_LightSource[index].specular)*
			vec3(gl_FrontMaterial.specular)* 
			pow(max(0.0,dot(reflect(-L,N),E)),gl_FrontMaterial.shininess);

		finalColor+=diff+spec;
	}
	gl_FragColor=vec4(finalColor,1.0);
}